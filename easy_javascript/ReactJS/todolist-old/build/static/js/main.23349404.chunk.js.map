{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","item","onChecked","onDelete","isCompleted","title","style","borderRadius","padding","border","margin","display","justifyContent","className","type","checked","onChange","onClick","id","TodoList","todos","onChangeChecked","onDeleteTodo","height","position","overflowY","map","todo","i","key","App","props","onChangeInput","e","value","target","setState","input","onSubmitTodo","state","index","trim","idx","findIndex","newItem","newTodos","filter","marginLeft","this","width","marginBottom","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23349404.chunk.js","sourcesContent":["import React from 'react'\n\nfunction TodoItem({ item, onChecked, onDelete }) {\n  const itemStyle = {\n    borderRadius: '5px',\n    padding: '10px 10px',\n    border: '1px solid #aaa',\n    margin: '5px 0',\n    display: 'flex',\n    justifyContent: 'space-between'\n  }\n  const { isCompleted, title } = item;\n\n  return (\n    <div style={itemStyle} className=\"col-md-12\">\n      <input\n        type=\"checkbox\"\n        checked={isCompleted}\n        onChange={() => onChecked(item)}\n      />\n      <div>{title}</div>\n      <button\n        type=\"button\"\n        className=\"btn btn-danger\"\n        onClick={() => onDelete(item.id)}\n      >\n        X\n      </button>\n    </div>\n  )\n}\n\nexport default TodoItem;","import React from 'react'\nimport TodoItem from './TodoItem'\n\nfunction TodoList({ todos, onChangeChecked, onDeleteTodo }) {\n  const listStyle = {\n    border: '1px solid #333',\n    height: '80%',\n    position: 'relative',\n    padding: '10px',\n    overflowY: 'scroll'\n  }\n  return (\n    <div style={listStyle}>\n      {\n        todos.map((todo, i) =>\n          <TodoItem\n            key={i}\n            item={todo}\n            onChecked={onChangeChecked}\n            onDelete={onDeleteTodo}\n          />\n        )\n      }\n    </div>\n  )\n}\n\nexport default TodoList;","import React from 'react';\n//import logo from './logo.svg';\nimport TodoList from './components/TodoList'\nimport './App.css';\n//import 'bootstrap/dist/css/bootstrap.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { input: '', todos: [], index: 0 }\n  }\n\n  onChangeInput = (e) => {\n    const value = e.target.value;\n    this.setState({ input: value })\n  }\n\n  onSubmitTodo = () => {\n    const { input, todos, index } = this.state\n    if (!input.trim()) return\n    const todo = {\n      isCompleted: false,\n      title: input,\n      id: index\n    }\n    this.setState({\n      todos: [...todos, todo],\n      input: '',\n      index: index + 1\n    })\n  }\n\n  onChangeChecked = (item) => {\n    const { todos } = this.state;\n    const idx = todos.findIndex(i => i.id === item.id);\n    const newItem = {\n      ...todos[idx],\n      isCompleted: !todos[idx].isCompleted,\n    }\n    const newTodos = [...todos]\n    newTodos[idx] = newItem;\n    this.setState({ todos: newTodos });\n  }\n\n  onDeleteTodo = (id) => {\n    const { todos } = this.state;\n    this.setState({\n      todos: todos.filter(i => id !== i.id)\n    })\n  }\n\n  render() {\n    const style = {\n      padding: '10px',\n      borderRadius: '25px',\n      marginLeft: '10px',\n      border: '1px solid #aaa'\n    }\n    const { input, todos } = this.state;\n\n    return (\n      <div style={{ width: '500px', height: '100%', margin: '50px auto', position: 'relative' }}>\n        <div style={{ marginBottom: '10px' }}>\n          <input\n            type=\"text\"\n            style={style}\n            value={input}\n            onChange={this.onChangeInput}\n            className=\"col-md-8\"\n            placeholder=\"Add a todo item\"\n          />\n          <button\n            style={style}\n            onClick={this.onSubmitTodo}\n            className=\"col-md-3 btn btn-info\"\n          >\n            Submit\n          </button>\n        </div>\n        <TodoList\n          todos={todos}\n          onChangeChecked={this.onChangeChecked}\n          onDeleteTodo={this.onDeleteTodo}\n        />\n\n      </div >\n    );\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}