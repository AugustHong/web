一、給你圓心座標和半徑，變成KML（即外圈的座標點全得到）

1.先將座標值轉成 TWD97 二分帶座標（好幾萬的那個數值）
2.因為是 "臺灣"   加上 是 "二分帶座標"（公尺）  而  半徑也是公尺（用圓心和距離等於半徑來算）
  例如： (300000, 250000) 半徑是 20000  則以圓心上下左右直線出發的4個點分別為 (300000, 270000) (300000, 230000) (280000, 250000) (320000, 250000)
3.KML的圓心座標點共有31個點（因為2個點是一個弧度） => 分別每12度一個弧

4. //公式為： 圓心(x0, y0) 半徑r 角度a 跑的從0~360度就是i（但我們只要31個點=> 所以拿 0 12 24 36 48這樣子拿）
       //圓上一點x座標 = x0 + r * parseFloat(Math.cos(Math.PI * (i / 180)).toFixed(12));
       //圓上一點y座標 = y0 + r * parseFloat(Math.sin(Math.PI * (i / 180)).toFixed(12));

	因為這次是31個點，所以才用0 12 24這樣子
	如果想要所有的點就是for(var i = 0; i <= 360; i++){} 這種

5.算完的值記得用TWD97toWGS84轉成經緯度

--------------------------------------------------------------------------------------------------------------------------------

二、 每個縣市的 可視點 (自己找的 => 大約 zoom 在 8 時，可以看到縣市的全貌)：

      <!--各縣市適合看到全部 的 點 物件-->
<script>
    countyViewPoint = {
        "臺北市": "121.5434646606445,25.082489467873543",
        "新北市": "121.54792785644531,24.98605802116758",
        "基隆市": "121.70997619628908,25.116688843147884",
        "桃園市": "121.27601623535156,24.864010555361574",
        "宜蘭縣": "121.62483215332031,24.552119771544227",
        "新竹縣": "121.15516662597655,24.670730258726067",
        "新竹市": "120.93681335449219,24.78424096495712",
        "苗粟縣": "120.89698791503905,24.458400585176463",
        "臺中市": "120.93132019042967,24.21189967855325",
        "南投縣": "120.99380493164061,23.840625534492915",
        "彰化縣": "120.48294067382812,23.946096014998375",
        "雲林縣": "120.38406372070312,23.702379629984165",
        "嘉義縣": "120.52894592285153,23.465765790247943",
        "嘉義市": "120.44517517089842,23.479621953329044",
        "臺南市": "120.32638549804688,23.147936590271485",
        "高雄市": "120.68824768066406,23.0822584849399",
        "屏東縣": "120.65597534179685,22.446571932178983",
        "臺東縣": "121.01303100585938,22.819225765913316",
        "花蓮縣": "121.41677856445312,23.750153913010124",
        "澎湖縣": "119.49897766113281,23.41284706430993",
        "金門縣": "118.32996368408203,24.43027121327718",
        "連江縣": "119.94220733642577,26.085771449420363"
    }
</script>

---------------------------------------------------------------------------------------------------------------------------------------

三、 WGS84 和 TWD97 的轉換：

      // 可以寫在後端中
      // 參考網?： http://wangshifuola.blogspot.com/2010/08/twd97wgs84-wgs84twd97.html

      (a) WGS84 轉 TWD97 ：

      <!--WGS84 轉 TWD97-->
<script>
    function WGS84ToTWD97(lon, lat) {
        var TWD97 = { x: 0, y: 0 };

        // 初使化參數值
        var a = 6378137.0;
        var b = 6356752.314245;
        var lon0 = 121 * Math.PI / 180;
        var k0 = 0.9999;
        var dx = 250000;

        lon = (lon/180) * Math.PI;
        lat = (lat/180) * Math.PI;
        
        //---------------------------------------------------------
        var e = Math.pow((1 - Math.pow(b,2) / Math.pow(a,2)), 0.5);
        var e2 = Math.pow(e,2)/(1-Math.pow(e,2)); 
        var n = ( a - b ) / ( a + b );
        var nu = a / Math.pow((1-(Math.pow(e,2)) * (Math.pow(Math.sin(lat), 2) ) ) , 0.5);
        var p = lon - lon0;
        var A = a * (1 - n + (5/4) * (Math.pow(n,2) - Math.pow(n,3)) + (81/64) * (Math.pow(n, 4)  - Math.pow(n, 5)));
        var B = (3 * a * n/2.0) * (1 - n + (7/8.0)*(Math.pow(n,2) - Math.pow(n,3)) + (55/64.0)*(Math.pow(n,4) - Math.pow(n,5)));
        var C = (15 * a * (Math.pow(n,2))/16.0)*(1 - n + (3/4.0)*(Math.pow(n,2) - Math.pow(n,3)));
        var D = (35 * a * (Math.pow(n,3))/48.0)*(1 - n + (11/16.0)*(Math.pow(n,2) - Math.pow(n,3)));
        var E = (315 * a * (Math.pow(n,4))/51.0)*(1 - n);

        var S = A * lat - B * Math.sin(2 * lat) +C * Math.sin(4 * lat) - D * Math.sin(6 * lat) + E * Math.sin(8 * lat);
 
        //計算Y值
        var K1 = S*k0;
        var K2 = k0*nu*Math.sin(2*lat)/4.0;
        var K3 = (k0*nu*Math.sin(lat)*(Math.pow(Math.cos(lat),3))/24.0) * (5 - Math.pow(Math.tan(lat),2) + 9*e2*Math.pow((Math.cos(lat)),2) + 4*(Math.pow(e2,2))*(Math.pow(Math.cos(lat),4)));
        var y = K1 + K2*(Math.pow(p,2)) + K3*(Math.pow(p,4));
 
        //計算X值
        var K4 = k0*nu*Math.cos(lat);
        var K5 = (k0*nu*(Math.pow(Math.cos(lat),3))/6.0) * (1 - Math.pow(Math.tan(lat),2) + e2*(Math.pow(Math.cos(lat),2)));
        var x = K4 * p + K5 * (Math.pow(p, 3)) + dx;

        TWD97 = {
            x: x,
            y : y
        }

        return TWD97;
    }
</script>

      (b) TWD97 轉 WGS84 ：

      <!--TWD97 轉 WGS84-->

      <script>
      function TWD97ToWGS84(x, y)
      {
            var WGS84 = { x: 0, y: 0 };

            // 初使化參數值
            var a = 6378137.0;
            var b = 6356752.314245;
            var lon0 = 121 * Math.PI / 180;
            var k0 = 0.9999;
            var dx = 250000;

            var dy = 0;
            var e = Math.pow((1- Math.pow(b,2)/Math.pow(a,2)), 0.5);

            x -= dx;
            y -= dy;

            // Calculate the Meridional Arc
            var M = y/k0;

            // Calculate Footprint Latitude
            var mu = M/(a*(1.0 - Math.pow(e, 2)/4.0 - 3*Math.pow(e, 4)/64.0 - 5*Math.pow(e, 6)/256.0));
            var e1 = (1.0 - Math.pow((1.0 - Math.pow(e, 2)), 0.5)) / (1.0 + Math.pow((1.0 - Math.pow(e, 2)), 0.5));

            var J1 = (3*e1/2 - 27*Math.pow(e1, 3)/32.0);
            var J2 = (21*Math.pow(e1, 2)/16 - 55*Math.pow(e1, 4)/32.0);
            var J3 = (151*Math.pow(e1, 3)/96.0);
            var J4 = (1097*Math.pow(e1, 4)/512.0);

            var fp = mu + J1*Math.sin(2*mu) + J2*Math.sin(4*mu) + J3*Math.sin(6*mu) + J4*Math.sin(8*mu);

            // Calculate Latitude and Longitude

            var e2 = Math.pow((e*a/b), 2);
            var C1 = Math.pow(e2*Math.cos(fp), 2);
            var T1 = Math.pow(Math.tan(fp), 2);
            var R1 = a*(1-Math.pow(e, 2))/Math.pow((1-Math.pow(e, 2)*Math.pow(Math.sin(fp), 2)), (3.0/2.0));
            var N1 = a/Math.pow((1-Math.pow(e, 2)*Math.pow(Math.sin(fp), 2)), 0.5);

            var D = x/(N1*k0);

            // 計算緯度
            var Q1 = N1*Math.tan(fp)/R1;
            var Q2 = (Math.pow(D, 2)/2.0);
            var Q3 = (5 + 3*T1 + 10*C1 - 4*Math.pow(C1, 2) - 9*e2)*Math.pow(D, 4)/24.0;
            var Q4 = (61 + 90*T1 + 298*C1 + 45*Math.pow(T1, 2) - 3*Math.pow(C1, 2) - 252*e2)*Math.pow(D, 6)/720.0;
            var lat = fp - Q1*(Q2 - Q3 + Q4);

            // 計算經度
            var Q5 = D;
            var Q6 = (1 + 2*T1 + C1)*Math.pow(D, 3)/6;
            var Q7 = (5 - 2*C1 + 28*T1 - 3*Math.pow(C1, 2) + 8*e2 + 24*Math.pow(T1, 2))*Math.pow(D, 5)/120.0;
            var lon = lon0 + (Q5 - Q6 + Q7)/Math.cos(fp);

            lat = (lat * 180) / Math.PI; //緯
            lon = (lon * 180) / Math.PI; //經

            WGS84 = {
                  x: lon,
                  y: lat
            }

            return WGS84;
      }
      </script>